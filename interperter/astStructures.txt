expression:
    arithmeticExp:
        type: arithmeticExp
        value: the name of the operator, like add, pow
        children: always 2
            1. left operand - either expression or a term
            2. right operand - expression/term
    
    logicalExp:
        type: logicalExp
        value: the name of the operator, like And, less (<)
        children: 
            2 children case
                1. left operand - logicalExp or a boolean variable/boolean literal
                2. right operand - logicalExp or a boolean variable/boolean literal
                in cases of operators like <, ==, ... one of the operand might be a term or an arithmeticExp

            1 child case:
                the value of the expression would be negate for !
                1. logicalExp

Term:
a node with no children with type of: literal, var, function/method call

assign:
    type: assign
    children:
        1. target as a var
        2. source - can be expression/function call/ DONT FORGET METHOD CALL/term

functionCall:
    type: functionCall
    value: funcName
    children:
        1. args: node with children of the args, might be any literal/identifier/expression

methodCall:
    type: methodCall
    value: methodName
    children:
        1. the object the method is performed at
        2. args: node with children of the args, might be any literal/identifier/expression



if:
    type: if
    children: 
        1. condition - expression/term
        2. body - must have
        3. else block - if exists with body of blocks

while:
    type: while
    children: 
        1. condition - expression/term
        2. body - must have

for loop:
    children:
    1. iteration var
    2. iterable, range would have a str tuple args
        range would have one child of args with children of args
    3. body

